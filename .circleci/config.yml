# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
THEME_NAME: &THEME_NAME "THEME"
THEME_PATH: &THEME_PATH "docroot/themes/custom/THEME"
ACQUIA_REPO: &ACQUIA_REPO "xxxxyyy@svn-45062.prod.hosting.acquia.com:XXXYYY.git"
ACQUIA_SITE_ID: &ACQUIA_SITE_ID "XXXYYY"
CYPRESS_NODE_VERSION: &CYPRESS_NODE_VERSION "20.16.0" # Matches NVMRC file.
CYPRESS_CIMG_PHP: &CYPRESS_CIMG_PHP "cimg/php:8.3-browsers"
CIMG_NODE: &CIMG_NODE "cimg/node:20.16.0" # Currently 16.  Matches theme .NVMRC
CIMG_PHP: &CIMG_PHP "cimg/php:8.3" # This is the version of PHP set in acquia.
CIMG_PHP_TAG: &CIMG_PHP_TAG "8.3" # This is the version of PHP set in acquia.
version: 2.1

orbs:
  ci-tools: kanopi/ci-tools@2        # https://circleci.com/developer/orbs/orb/kanopi/ci-tools
  cms-updates: kanopi/cms-updates@2  # https://circleci.com/developer/orbs/orb/kanopi/cms-updates
  slack: circleci/slack@3.4.2
  deploy: kanopi/deploy@1            # https://circleci.com/developer/orbs/orb/kanopi/deploy
  node: circleci/node@5.0.3

after_build: &after_build << pipeline.parameters.run_post_build_tests >>

parameters:
  run_post_build_tests:
    type: boolean
    default: false
  target_url:
    type: string
    default: ''

jobs:

  cypress:
    docker:
      - image: *CYPRESS_CIMG_PHP
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
    environment:
      ACQUIA_SITE_ID: *ACQUIA_SITE_ID
      SITE_URL: << pipeline.parameters.target_url >>
    resource_class: large
    parallelism: 1
    steps:
      - ci-tools/set-variables
      - checkout
      - run:
          name: Install Composer packages
          command: composer install
      - ci-tools/copy-ssh-key
      - node/install:
          node-version: *CYPRESS_NODE_VERSION
      - run:
          name: Prime Cache
          command: curl -I "${SITE_URL}"
      - run:
          name: Set Variables
          command: |
            (
                echo "export CYPRESS_BASE_URL='${SITE_URL}'"
                echo "export CYPRESS_DRUSH_IS_TUGBOAT='pr-${CIRCLE_PULL_REQUEST##*/}.${PANTHEON_UUID}'"
            ) >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Install Cypress
          command: npm ci
          path: tests/cypress

      - run:
          name: Run Tests
          command: |
            shopt -s globstar
            circleci tests glob cypress/e2e/**/*.cy.js | circleci tests split --split-by=timings > /tmp/tests-to-run
            ./node_modules/.bin/cypress run -s $(cat /tmp/tests-to-run)
          path: tests/cypress

      - run:
          when: always
          name: Generate Report
          command: npm run merge:reports
          path: tests/cypress

      - store_test_results:
          path: tests/cypress/cypress/junit

      - store_artifacts:
          path: tests/cypress/cypress/

  compile-theme:
    docker:
      # This version of node should match whats in the theme NVM setup
      - image: *CIMG_NODE
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          name: Restore Node cache
          keys:
            - node_cache-{{ checksum "docroot/themes/custom/THEME/package-lock.json" }}
            - node_cache-
      - run:
          name: Install Node Packages.
          command: npm ci
          path: *THEME_PATH

      - save_cache:
          name: Save node cache
          key: node_cache-{{ checksum "docroot/themes/custom/THEME/package-lock.json" }}
          paths:
            - docroot/themes/custom/THEME/node_modules
      - run:
          name: Compile CSS
          command: npm run build:prod
          path: *THEME_PATH
      - persist_to_workspace:
          root: *THEME_PATH
          paths:
            - assets/dist

  compile-drupal:
    docker:
      - image: *CIMG_PHP
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          name: Restore Composer cache
          keys:
            - composer_cache-{{ checksum "composer.lock" }}
            - composer_cache-
      - run:
          name: Composer build
          command: composer install --no-dev

      - save_cache:
          name: Save Composer cache
          key: composer_cache-{{ checksum "composer.lock" }}
          paths:
            - vendor

      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Copy compiled theme assets.
          environment:
            THEME_PATH: *THEME_PATH
          command: |
            cp -vr /tmp/workspace/dist "$THEME_PATH/assets"

      - ci-tools/remove-files:
          docroot: "docroot"

      - persist_to_workspace:
          root: ~/project
          paths:
            - docroot
            - vendor


#      - slack/notify:
#          message: "Finished multidev build ${MULTIDEV_SITE_URL}\n
#          Branch: *${CIRCLE_BRANCH}*\n
#          PR: ${CIRCLE_PULL_REQUEST}"
#          include_job_number_field: false
#          include_project_field: false
#          webhook: https://hooks.slack.com/services/T02BTKQ5F/B0225B1RPV1/9999111100000

workflows:
  version: 2
  static-tests:
    when:
      not:
        or:
          - << pipeline.parameters.run_post_build_tests >>
          - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
          - equal: [ api, << pipeline.trigger_source >> ]
    jobs:
      - ci-tools/composer:
          tag: *CIMG_PHP_TAG
          name: "phpstan"
          context: kanopi-code
          command: 'phpstan'
          report-title: 'phpstan'
          save-output: true
          post-to-github: true
          filters:
            branches:
              ignore:
                - main
      - ci-tools/composer:
          tag: *CIMG_PHP_TAG
          name: "phpcs"
          report-title: 'phpcs'
          context: kanopi-code
          command: 'code-sniff'
          save-output: true
          post-to-github: true
          filters:
            branches:
              ignore:
                - main
      - ci-tools/composer:
          tag: *CIMG_PHP_TAG
          name: "rector-modules"
          report-title: 'rector-modules'
          context: kanopi-code
          command: 'rector-modules'
          save-output: true
          post-to-github: true
          filters:
            branches:
              ignore:
                - main
      - ci-tools/composer:
          tag: *CIMG_PHP_TAG
          name: "rector-theme"
          report-title: 'rector-theme'
          context: kanopi-code
          command: 'rector-themes'
          save-output: true
          post-to-github: true
          filters:
            branches:
              ignore:
                - main

  deploy:
    jobs:
      - compile-theme:
          context: kanopi-code
          filters:
            branches:
              only:
                - main
      - deploy/git:
          image: *CIMG_PHP
          name: Deploy to Acquia DEV
          context: kanopi-code
          git-remote-url: *ACQUIA_REPO
          git-commit-assets: true
          requires:
            - compile-theme
          pre-push:
            - restore_cache:
                name: Restore Composer cache
                keys:
                  - deploy_composer_cache-{{ checksum "composer.lock" }}
                  - deploy_composer_cache-
            - run:
                name: Composer build
                command: composer install

            - save_cache:
                name: Save Composer cache
                key: deploy_composer_cache-{{ checksum "composer.lock" }}
                paths:
                  - vendor

            # Workspace is attached by default.
            - run:
                name: Copy compiled theme assets.
                environment:
                  THEME_PATH: *THEME_PATH
                command: |
                  cp -vr ./assets/dist "$THEME_PATH/assets"

            - ci-tools/remove-files:
                docroot: "docroot"
          post-push:
            - slack/notify:
                message: "Finished push to Acquia\n
                Acquia Dashboard: https://cloud.acquia.com/a/applications/xxx"
                include_job_number_field: false
                include_project_field: false
                webhook: "https://hooks.slack.com/services/T02BTKQ5F/B03PERNJBQV/xxx"
          filters:
            branches:
              only:
                - main

  post_build_tests:
    when: *after_build
    jobs:
      - cypress:
          context: kanopi-code
          filters:
            branches:
              ignore:
                - main
          post-steps:
            ## Do two different GitHub posts to capture passes/fails separately.
            - ci-tools/post-artifact-to-github:
                when: 'on_fail'
                body-prefix: ":x: Test runner: **$CIRCLE_NODE_INDEX / $CIRCLE_NODE_TOTAL** \ $CIRCLE_BUILD_URL "
                body-title: "Failing Cypress Run"
                search-for: "results/mocha-report/mochawesome.html"
            - ci-tools/post-artifact-to-github:
                when: 'on_success'
                body-prefix: ":white_check_mark: Test runner: **$CIRCLE_NODE_INDEX / $CIRCLE_NODE_TOTAL** "
                body-title: "Passing Cypress Run"
                search-for: "results/mocha-report/mochawesome.html"
      - ci-tools/lighthouse:
          context: kanopi-code
          pre-steps:
            - run:
                name: Set lighthouse url
                command: echo "export LIGHTHOUSE_URL=<< pipeline.parameters.target_url >>" >> "$BASH_ENV"
          url: "${LIGHTHOUSE_URL}"
          post-steps:
            - ci-tools/post-to-github-commit:
                body: '@$(ls /opt/reports/*/comment.txt)'
                when: 'always'
          filters:
            branches:
              ignore:
                - main
#  CMS Updates orbs needs to have acquia as an option.
#  automated-updates:
#    when:
#      and:
#        # Looks for a trigger to run in the CircleCI project with the "automatic updates" name.
#        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
#        - equal: [ "automatic updates", << pipeline.schedule.name >> ]
#    jobs:
#      - cms-updates/run-update:
#          cms: drupal
#          docroot: docroot
#          site-env: dev
#          site-hosting: acquia
#          site-id: *ACQUIA_SITE_ID
#          update-method: composer
#          context: kanopi-code
#          php-version: *CIMG_PHP_TAG
