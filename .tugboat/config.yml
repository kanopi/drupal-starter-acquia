version: 1
services:
  # What to call the service hosting the site.
  php:
    image: tugboatqa/php:8.3-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends:
      - mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and mod-rewrite.
        - apt-get update
        - apt-get install libzip-dev
        - docker-php-ext-install opcache zip
        - docker-php-ext-enable opcache zip
        - a2enmod headers rewrite

        # Set memory limit for php
        - echo "memory_limit = 512M" >> /usr/local/etc/php/conf.d/my-php.ini

        # Tell VirtualHost to Use the File Proxy
        - sed -i '/^<\/VirtualHost>.*/i \\tIncludeOptional conf-enabled/apache-file-proxy.conf' /etc/apache2/sites-enabled/000-default.conf
        # Download the File Proxy
        - curl -o "/etc/apache2/conf-enabled/apache-file-proxy.conf" https://gist.githubusercontent.com/paulsheldrake/0cbd7638a4255991d2a47026259822e3/raw/9f9afa820e168aa7f243a463d36dcfa9bddb1da0/apache-file-proxy.conf
        # Replace the placeholders
        - |
          SOURCE_DOMAIN="https://xxxyyy.prod.acquia-sites.com/"
          sed -i "s|##DOMAIN##|${SOURCE_DOMAIN}|i" /etc/apache2/conf-enabled/apache-file-proxy.conf

        # Link the document root to the expected path.
        - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"

        # Install node.
        - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        - apt-get install -y nodejs
        - node --version

      # Commands that import files, databases, or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Use the tugboat-specific Drupal settings.
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"

        # Install/update packages managed by composer, including drush.
        - composer install

        # Use drush provided by composer.
        - ln -sf ${TUGBOAT_ROOT}/vendor/bin/drush /usr/local/bin/drush

        # Update node packages and compile theme
        - |
          cd ${DOCROOT}/themes/custom/frick
          npm install
          npm run build:prod

        # Update the DB.
        - |
          cd ${DOCROOT}
          drush sa
          drush sql:sync @XXXYYY.dev @self -y
          drush cr


        # Reset files folder.
        - |
          mkdir -p "${DOCROOT}/sites/default/files"
          chmod -R 777 "${DOCROOT}/sites/default/files"
          chgrp -R www-data "${DOCROOT}/sites/default/files"

        # Create Cypress users
        - |
          cd ${DOCROOT}
          drush user-create cypress --mail="kanopi_cypress@mailinator.com" --password="cypress" || true
          drush user-add-role administrator cypress || true


      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - composer install
        # Update node packages and compile theme
        - |
          cd ${DOCROOT}/themes/custom/frick
          npm install
          npm run build:prod

        - drush cache:rebuild
        - drush updatedb -y || true

        # Import branch specific config.
        - drush --debug cim -y || true
        - drush cr


      online:
        - |
          PROJECT_SLUG="github/kanopi/frick"
          DATA="{\"branch\":\"$TUGBOAT_GITHUB_HEAD\",\"parameters\":{\"run_post_build_tests\":true, \"target_url\": \"$TUGBOAT_SERVICE_URL\"}}"
          echo $DATA
          curl -fsSLv \
          -X POST \
          --header 'Content-Type: application/json' \
          --header 'Accept: application/json' \
          --header "Circle-Token: $CIRCLE_TOKEN" \
          -d "${DATA}" \
          https://circleci.com/api/v2/project/${PROJECT_SLUG}/pipeline

  mysql:
    image: tugboatqa/mysql:5

    # A set of commands to run while building this service
    commands:
      init:
        # Increase the allowed packet size to 512MB.
        - mysql -e "SET GLOBAL max_allowed_packet=536870912;"


#  solr:
#    image: tugboatqa/solr:8.6
#    checkout: true
#    commands:
#      init:
#        - su -s /bin/sh -c "solr create_core -c drupal_solr -force" solr
#
#      build:
#        - cd "${SOLR_HOME}/drupal_solr" && rm -rf conf
#        - cd "${SOLR_HOME}/drupal_solr" && ln -snf "${TUGBOAT_ROOT}/.tugboat/config/solr" conf
