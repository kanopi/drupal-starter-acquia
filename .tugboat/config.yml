version: 1
services:
  # What to call the service hosting the site.
  php:
    # Use PHP 7.x with Apache to serve the WordPress site; this syntax pulls in the latest version of PHP 7
    image: tugboatqa/php:8.0-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # Browser testings
    urls:
      - url: /
        screenshot:
          enabled: true
        visualdiff:
          enabled: true

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install opcache and mod-rewrite.
        - apt-get update
        - apt-get install libzip-dev
        - docker-php-ext-install opcache zip
        - docker-php-ext-enable opcache zip
        - a2enmod headers rewrite

        # Install drush-launcher, if desired.
        - wget -O /usr/local/bin/drush https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
        - chmod +x /usr/local/bin/drush

        # Set memory limit for php
        - echo "memory_limit = 512M" >> /usr/local/etc/php/conf.d/my-php.ini

        # Tell VirtualHost to Use the File Proxy
        - sed -i '/^<\/VirtualHost>.*/i \\tIncludeOptional conf-enabled/apache-file-proxy.conf' /etc/apache2/sites-enabled/000-default.conf
        # Download the File Proxy
        - curl -o "/etc/apache2/conf-enabled/apache-file-proxy.conf" https://gist.githubusercontent.com/paulsheldrake/0cbd7638a4255991d2a47026259822e3/raw/9f9afa820e168aa7f243a463d36dcfa9bddb1da0/apache-file-proxy.conf
        # Replace the placeholders
        - |
          SOURCE_DOMAIN="https://xxxyyy.prod.acquia-sites.com/"
          sed -i "s|##DOMAIN##|${SOURCE_DOMAIN}|i" /etc/apache2/conf-enabled/apache-file-proxy.conf

        # Link the document root to the expected path.
        - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"

        # Install node.
        - curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
        - apt-get install -y nodejs
        - node --version

      # Commands that import files, databases, or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Use the tugboat-specific Drupal settings.
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/"

        # Install/update packages managed by composer, including drush.
        - composer install

        # Update node packages and compile theme
        - |
          cd ${DOCROOT}/themes/custom/THEME
          npm install
          npm run build

        # Update the DB.
        - |
          cd ${DOCROOT}
          drush sa
          drush sql:sync @XXXYYY.dev @self -y
          drush cr


        # Reset files folder.
        - |
          mkdir -p "${DOCROOT}/sites/default/files"
          chmod -R 777 "${DOCROOT}/sites/default/files"
          chgrp -R www-data "${DOCROOT}/sites/default/files"


      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - composer install
        # Update node packages and compile theme
        - |
          cd ${DOCROOT}/themes/custom/hanson
          npm install
          npm run build

        - drush cache:rebuild
        - drush updatedb -y || true

        # Import branch specific config.
        - drush --debug cim -y || true
        - drush cr

  # What to call the service hosting MySQL. This name also acts as the
  # hostname to access the service by from the php service.
  mysql:

    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mysql:5

    # A set of commands to run while building this service
    commands:
      init:
        # Increase the allowed packet size to 512MB.
        - mysql -e "SET GLOBAL max_allowed_packet=536870912;"


  solr:
    image: tugboatqa/solr:7
    checkout: true
    commands:
      init:
        - su -s /bin/sh -c "solr create_core -c tugboat -force" solr

      build:
      # - cd "${SOLR_HOME}/tugboat" && rm -rf conf
      # - cd "${SOLR_HOME}/[CORE]" && ln -snf "${TUGBOAT_ROOT}/path/to/solr/config" conf
